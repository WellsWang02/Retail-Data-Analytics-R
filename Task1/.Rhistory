pastSales_Controls95 <- pastSales%>%
filter(Store_type == 'Control') %>%
mutate(totSales = totSales *(1+stdDev*2),
Store_type = 'Control 95th % confidence interval')
# pastSales_Controls95 <- pastSales[Store_type == "Control",
#                                   ][, totSales := totSales + (stdDev * 2)
#                                     ][, Store_type := "Control 95th % confidence interval"]
#### Control store 5th percentile
pastSales_Controls5 <- pastSales%>%
filter(Store_type == 'Control') %>%
mutate(totSales = totSales *(1-stdDev*2),
Store_type = 'Control 5th % confidence interval')
# pastSales_Controls5 <- pastSales[Store_type == "Control",
#                                  ][, totSales := totSales - (stdDev * 2)
#                                    ][, Store_type := "Control 5th % confidence interval"]
trialAssessment <- rbind(pastSales, pastSales_Controls95, pastSales_Controls5)
#### Plotting these in one nice graph
pp1 <- ggplot(trialAssessment, aes(TransactionMonth, totSales, color = Store_type)) +
geom_rect(data = trialAssessment %>% filter(YEARMONTH < 201905 & YEARMONTH > 201901) ,
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 , ymax =
Inf, color = NULL), show.legend = FALSE) +
geom_line() +
labs(x = "Month of operation", y = "Total sales",
title = "Total sales by month - Trial 77 vs Control 233")
pp1
#### This would be a repeat of the steps before for total sales
#### Scale pre-trial control customers to match pre-trial trial store customers
#### Over to you! Compute a scaling factor to align control store customer counts to our trial store.
#### Then, apply the scaling factor to control store customer counts.
#### Finally, calculate the percentage difference between scaled control store customers and trial customers.
scalingFactorForControlCust <- preTrialMeasures[STORE_NBR==trial_store, sum(nCustomers)]/
preTrialMeasures[STORE_NBR==control_store, sum(nCustomers)]
measureOverTimeCusts <- measureOverTime
scaledControlCustomers <- measureOverTimeCusts[STORE_NBR==control_store,
][, controlCustomers := nCustomers*scalingFactorForControlCust
][, Store_type := 'Control']
percentageDiff <- merge(scaledControlCustomers, measureOverTimeCusts[STORE_NBR==trial_store,],
by = 'YEARMONTH')[, percentageDiff:= abs(nCustomers.y/controlCustomers-1)]
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH < 201902 , percentageDiff])
degreesOfFreedom <- 7
# percentageDiff[, tValue:= (percentageDiff-0)/stdDev
#                ][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100,
#                                                      YEARMONTH %% 100, 1,
#                                                      sep='-'), format = '%Y-%m-%d')
#                  ][, .(TransactionMonth,
#                        percentile_95th = qt(p=0.025, degreesOfFreedom, lower.tail = F),
#                        tValue)]
#### Trial and control store number of customers
pastCustomers <- measureOverTimeCusts[, Store_type:= ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))
][, nCusts := mean(nCustomers),
by = c("YEARMONTH", "Store_type")
][, TransactionMonth := as.Date(paste(YEARMONTH %/%100,
YEARMONTH %% 100, 1,
sep='-'),
format = '%Y-%m-%d')
][Store_type %in% c("Trial", "Control"), ]
#### Control store 95th percentile
pastCustomers_Controls95 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 + stdDev * 2)
][, Store_type := "Control 95th % confidence interval"]
#### Control store 5th percentile
pastCustomers_Controls5 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 - stdDev * 2)
][, Store_type := "Control 5th % confidence interval"]
trialAssessment <- rbind(pastCustomers,
pastCustomers_Controls95,
pastCustomers_Controls5)
#### Over to you! Plot everything into one nice graph.
#### Hint: geom_rect creates a rectangle in the plot. Use this to highlight the trial period in our graph.
pp2 <- ggplot(trialAssessment, aes(TransactionMonth, nCusts, color=Store_type)) +
geom_rect(data = trialAssessment[YEARMONTH<201905&YEARMONTH>201901,],
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth),
ymin = 0, ymax = Inf, color = NULL), show.legend = FALSE) +
geom_line() +
labs(x = 'Month of operation', y = 'Total customer',
title = 'Total customer by months - Trial 77 vs Control 233')
pp2
#### Over to you! Calculate the metrics below as we did for the first trial store.
measureOverTime <- data[, .(totSales = sum(TOT_SALES),
nCustomers = uniqueN(LYLTY_CARD_NBR),
nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR),
nChipsPerTxn = sum(PROD_QTY)/uniqueN(TXN_ID),
avgPricePerUnit = sum(TOT_SALES)/sum(PROD_QTY)
), by = .(STORE_NBR, YEARMONTH)][order(STORE_NBR,YEARMONTH)]
storesWithFullObs <- unique(measureOverTime[, .N, STORE_NBR][N == 12, STORE_NBR])
preTrialMeasures <- measureOverTime[YEARMONTH < 201902 & STORE_NBR %in% storesWithFullObs, ]
#### Over to you! Use the functions we created earlier to calculate correlation and magnitude for each potential control store
trial_store <- 86
corr_nSales <- calculateCorrelation(preTrialMeasures, quote(totSales), trial_store)
corr_nCustomers <- calculateCorrelation(preTrialMeasures, quote(nCustomers), trial_store)
magnitude_nSales <- calculateMagnitudeDistance(preTrialMeasures, quote(totSales), trial_store)
magnitude_nCustomers <- calculateMagnitudeDistance(preTrialMeasures, quote(nCustomers), trial_store)
#### Now, create a combined score composed of correlation and magnitude
corr_weight <- 0.5
score_nSales <- merge(corr_nSales, magnitude_nSales,
by = c('Store1','Store2')
)[, scoreNSales := corr_weight*corr_measure+(1-corr_weight)*mag_measure]
score_nCustomers <- merge(corr_nCustomers, magnitude_nCustomers,
by = c('Store1','Store2')
)[, scoreNCust := corr_weight*corr_measure+(1-corr_weight)*mag_measure]
#### Finally, combine scores across the drivers using a simple average.
score_Control <- merge(score_nSales, score_nCustomers, by = c('Store1','Store2'))
score_Control[, finalControlScore := (scoreNSales+scoreNCust)/2]
#### Select control stores based on the highest matching store
#### (closest to 1 but not the store itself, i.e. the second ranked highest store)
#### Select control store for trial store 86
control_store <- score_Control[Store1 == trial_store,
][order(-finalControlScore)][2, Store2]
control_store
#### Over to you! Conduct visual checks on trends based on the drivers
pastSales <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store,'Trial',
'Other stores'))) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(totSales = mean(totSales), .groups = 'drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep='-'), format = '%Y-%m-%d')) %>%
filter(YEARMONTH<201903)
p3<-ggplot(pastSales, aes(TransactionMonth, totSales, color = Store_type)) +
geom_line() +
labs(x='Month of operation', y='Total sales',
title = '    Trial 86 vs Control 155
Total sales by month')
p3
#### Over to you again! Conduct visual checks on trends based on the drivers
pastCustomers <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store,'Trial',
'Other stores'))) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(numberCustomers = mean(nCustomers), .groups = 'drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep='-'), format = '%Y-%m-%d')) %>%
filter(YEARMONTH <201903)
p4<-ggplot(pastCustomers, aes(TransactionMonth, numberCustomers, color=Store_type)) +
geom_line() +
labs(x='Month of operation', y='Number of customers',
title = '    Trial 86 vs Control 155
Total customers by month')
p4
#### Scale pre-trial control sales to match pre-trial trial store sales
scalingFactorForControlSales <- preTrialMeasures[STORE_NBR == trial_store, sum(totSales)]/
preTrialMeasures[STORE_NBR == control_store, sum(totSales)]
#### Apply the scaling factor
measureOverTimeSales <- measureOverTime
scaledControlSales <- measureOverTimeSales[STORE_NBR == control_store,
][ ,controlSales := totSales *
scalingFactorForControlSales]
#### Over to you! Calculate the percentage difference between scaled control sales and trial sales
#### Hint: When calculating percentage difference, remember to use absolute difference
percentageDiff <- merge(scaledControlSales,
measureOverTimeSales[STORE_NBR==trial_store,],
by = "YEARMONTH"
)[, percentageDiff := abs(totSales.y/controlSales-1)]
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
#### Over to you! Calculate the standard deviation of percentage differences during the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH<201902, percentageDiff])
degreesOfFreedom <- 7
#### Trial and control store total sales
#### Over to you! Create a table with sales by store type and month.
#### Hint: We only need data for the trial and control store.
pastSales <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(totSales = mean(totSales), .groups = 'drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-'))) %>%
filter(Store_type %in% c('Control', 'Trial'))
#### Over to you! Calculate the 5th and 95th percentile for control store sales.
#### Hint: The 5th and 95th percentiles can be approximated by using two standard deviations away from the mean.
#### Hint2: Recall that the variable stdDev earlier calculates standard deviation in percentages, and not dollar sales.
pastSales_Controls95 <- pastSales %>%
filter(Store_type=='Control') %>%
mutate(totSales = totSales*(1+ stdDev*2),
Store_type = 'Control 95th % confidence interval')
pastSales_Controls5 <-  pastSales %>%
filter(Store_type == 'Control') %>%
mutate(totSales = totSales*(1 - stdDev*2),
Store_type = "Control 5th % confidence interval")
#### Then, create a combined table with columns from pastSales, pastSales_Controls95 and pastSales_Controls5
trialAssessment <- rbind(pastSales,
pastSales_Controls95,
pastSales_Controls5)
#### Plotting these in one nice graph
pp3<-ggplot(trialAssessment, aes(TransactionMonth, totSales, color = Store_type)) +
geom_rect(data = trialAssessment%>%filter(YEARMONTH < 201905 & YEARMONTH > 201901),
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth),
ymin = 0 , ymax =Inf, color = NULL), show.legend = FALSE) +
geom_line(aes(linetype = Store_type)) +
labs(x = "Month of operation", y = "Total sales",
title = "Total sales by month - Trial 86 Control 155")
pp3
#### This would be a repeat of the steps before for total sales
#### Scale pre-trial control customers to match pre-trial trial store customers
scalingFactorForControlCust <- preTrialMeasures[STORE_NBR == trial_store, sum(nCustomers)]/
preTrialMeasures[STORE_NBR == control_store, sum(nCustomers)]
#### Apply the scaling factor
measureOverTimeCusts <- measureOverTime[, Store_type := ifelse(STORE_NBR == trial_store, 'Trial',
ifelse(STORE_NBR == control_store,
"Control", "Other stores"))]
# scaledControlCustomers <- measureOverTime %>%
#   filter(STORE_NBR == control_store) %>%
#   mutate(Store_type = ifelse(STORE_NBR == trial_store, "Trial",
#                              ifelse(STORE_NBR == control_store,
#                                     "Control", "Other stores")),
#          controlCustomers = nCustomers * scalingFactorForControlCust)
scaledControlCustomers <- measureOverTimeCusts[STORE_NBR == control_store,
][ , controlCustomers := nCustomers
* scalingFactorForControlCust
]
#### Calculate the percentage difference between scaled control customer and trial customer
percentageDiff <- merge(scaledControlCustomers[, c("YEARMONTH", "controlCustomers")],
measureOverTime[STORE_NBR == trial_store, c("nCustomers", "YEARMONTH")],
by = "YEARMONTH"
)[, percentageDiff := abs(nCustomers/controlCustomers-1)]
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH < 201902 , percentageDiff])
degreesOfFreedom <- 7
#### Trial and control store number of customers
pastCustomers <- measureOverTimeCusts[, nCusts := mean(nCustomers), by =
c("YEARMONTH", "Store_type")
][Store_type %in% c("Trial", "Control"), ]
#### Control store 95th percentile
pastCustomers_Controls95 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 + stdDev * 2)
][, Store_type := "Control 95th % confidence interval"]
#### Control store 5th percentile
pastCustomers_Controls5 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 - stdDev * 2)
][, Store_type := "Control 5th % confidence interval"]
trialAssessment <- rbind(pastCustomers,
pastCustomers_Controls95,
pastCustomers_Controls5
)[, TransactionMonth := as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-'))]
#### Plotting these in one nice graph
pp4<-ggplot(trialAssessment, aes(TransactionMonth, nCusts, color = Store_type)) +
geom_rect(data = trialAssessment[ YEARMONTH < 201905 & YEARMONTH > 201901 ,],
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth),
ymin = 0 , ymax = Inf, color = NULL), show.legend = FALSE) +
geom_line() +
labs(x = "Month of operation", y = "Number of customers",
title = "Total customers by month - Trial 86 Control 155")
pp4
#### All over to you now! Your manager has left for a conference call, so you'll be on your own this time.
#### Conduct the analysis on trial store 88.
measureOverTime <- data[, .(totSales = sum(TOT_SALES),
nCustomers = uniqueN(LYLTY_CARD_NBR),
nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR),
nChipsPerTxn = sum(PROD_QTY)/uniqueN(TXN_ID),
avgPricePerUnit = sum(TOT_SALES)/sum(PROD_QTY)
), by = .(YEARMONTH, STORE_NBR)][order(YEARMONTH, STORE_NBR)]
storesWithFullObs <- unique(measureOverTime[, .N, by = STORE_NBR][N==12, STORE_NBR])
preTrialMeasures <- measureOverTime[YEARMONTH<201902 & STORE_NBR %in% storesWithFullObs,]
#### Use the functions from earlier to calculate the correlation of the sales and number of customers of each potential control store to the trial store
trial_store <- 88
corr_nSales <- calculateCorrelation(preTrialMeasures, quote(totSales), trial_store)
corr_nCustomers <- calculateCorrelation(preTrialMeasures, quote(nCustomers), trial_store)
#### Use the functions from earlier to calculate the magnitude distance of the sales and number of customers of each potential control store to the trial store
magnitude_nSales <- calculateMagnitudeDistance(preTrialMeasures, quote(totSales), trial_store)
magnitude_nCustomers <- calculateMagnitudeDistance(preTrialMeasures, quote(nCustomers), trial_store)
#### Create a combined score composed of correlation and magnitude by merging the correlations table and the magnitudes table, for each driver.
corr_weight <- 0.5
score_nSales <- merge(corr_nSales, magnitude_nSales,
by = c('Store1', 'Store2')
)[, scoreNSales := corr_weight*corr_measure+(1-corr_weight)*mag_measure]
score_nCustomers <- merge(corr_nCustomers, magnitude_nCustomers,
by = c('Store1', 'Store2')
)[, scoreNCust := corr_weight*corr_measure+(1-corr_weight)*mag_measure]
#### Combine scores across the drivers by merging sales scores and customer scores, and compute a final combined score.
score_Control <- merge(score_nSales, score_nCustomers, by = c('Store1', 'Store2'))
score_Control[, finalControlScore := (scoreNSales+scoreNCust)/2]
#### Select control stores based on the highest matching store
#### (closest to 1 but not the store itself, i.e. the second ranked highest store)
#### Select control store for trial store 88
control_store <- score_Control[order(-finalControlScore)][2, Store2]
control_store
#### Visual checks on trends based on the drivers
#### For the period before the trial, create a graph with total sales of the trial store for each month, compared to the control store and other stores.
measureOverTimeSales <- measureOverTime
pastSales <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other store'))) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(totSales = mean(totSales), .groups='drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-'))) %>%
filter(YEARMONTH <201902)
p5<-ggplot(pastSales, aes(TransactionMonth, totSales, color = Store_type)) +
geom_line() +
labs(x='Month of operation', y = 'Total sales',
title='    Trial 88 vs Control 237
Total sales by month')
p5
#### Visual checks on trends based on the drivers
#### For the period before the trial, create a graph with customer counts of the trial store for each month, compared to the control store and other stores.
measureOverTimeCusts <- measureOverTime
pastCustomers <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(nCustomers = mean(nCustomers), .groups='drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-'))) %>%
filter(YEARMONTH <201902)
p6<-ggplot(pastCustomers, aes(TransactionMonth, nCustomers, color=Store_type)) +
geom_line() +
labs(x='Month of operation', y='Number of customers',
title = '    Trial 88 vs Control 237
Total customers by month')
p6
#### Scale pre-trial control store sales to match pre-trial trial store sales
scalingFactorForControlSales <- preTrialMeasures[STORE_NBR==trial_store, sum(totSales)]/
preTrialMeasures[STORE_NBR==control_store, sum(totSales)]
#### Apply the scaling factor
measureOverTimeSales <- measureOverTime
scaledControlSales <- measureOverTime[STORE_NBR==control_store,
][, controlSales := totSales*scalingFactorForControlSales]
#### Calculate the absolute percentage difference between scaled control sales and trial sales
percentageDiff <- merge(scaledControlSales[,c('YEARMONTH','controlSales')],
measureOverTimeSales[STORE_NBR== trial_store, c('YEARMONTH', 'totSales')],
by= 'YEARMONTH')[, percentageDiff := abs(totSales/controlSales-1)]
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH<201902, percentageDiff])
degreesOfFreedom <- 7
#### Trial and control store total sales
measureOverTimeSales <- measureOverTime
pastSales <- measureOverTime %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))) %>%
filter(Store_type %in% c('Trial', 'Control')) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(totSales = mean(totSales), .groups='drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-')))
#### Control store 95th percentile
pastSales_Controls95 <- pastSales %>%
filter(Store_type=='Control') %>%
mutate(totSales = totSales*(1 + stdDev*2),
Store_type= 'Control 95th % confidence interval')
#### Control store 5th percentile
pastSales_Controls5 <- pastSales %>%
filter(Store_type=='Control') %>%
mutate(totSales = totSales*(1 - stdDev*2),
Store_type= 'Control 5th % confidence interval')
#### Combine the tables pastSales, pastSales_Controls95, pastSales_Controls5
trialAssessment <- rbind(pastSales, pastSales_Controls95, pastSales_Controls5)
#### Plot these in one nice graph
pp5<-ggplot(trialAssessment, aes(TransactionMonth, totSales, color=Store_type)) +
geom_rect(data = trialAssessment %>% filter(YEARMONTH<201905 & YEARMONTH>201901),
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth),
ymin = 0, ymax = Inf, color = NULL), show.legend =FALSE )+
geom_line() +
labs(x = 'Month of operation', y='Total sales',
title='Total sales by month - Trial 88 Control 237')
pp5
#### This would be a repeat of the steps before for total sales
#### Scale pre-trial control store customers to match pre-trial trial store customers
scalingFactorForControlCust <- preTrialMeasures[STORE_NBR==trial_store, sum(nCustomers)]/
preTrialMeasures[STORE_NBR==control_store, sum(nCustomers)]
#### Apply the scaling factor
measureOverTimeCusts <- measureOverTime
scaledControlCustomers <- measureOverTimeCusts[STORE_NBR==control_store,
][, controlCust := nCustomers*
scalingFactorForControlCust]
#### Calculate the absolute percentage difference between scaled control sales and trial sales
percentageDiff <- merge(scaledControlCustomers[,c('YEARMONTH', 'controlCust')],
measureOverTimeCusts[STORE_NBR==trial_store,
c('YEARMONTH', 'nCustomers')],
by = 'YEARMONTH')[, percentageDiff:= abs(nCustomers/controlCust-1)]
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH<201902, percentageDiff])
degreesOfFreedom <- 7 # note that there are 8 months in the pre-trial period hence 8 - 1 = 7 degrees of freedom
#### Trial and control store number of customers
pastCustomers <- measureOverTimeCusts %>%
mutate(Store_type = ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))) %>%
filter(Store_type %in% c('Trial', 'Control')) %>%
group_by(YEARMONTH, Store_type) %>%
summarise(nCustomers = mean(nCustomers), .groups='drop') %>%
mutate(TransactionMonth = as.Date(paste(YEARMONTH %/% 100,
YEARMONTH %% 100, 1,
sep = '-')))
#### Control store 95th percentile
pastCustomers_Controls95 <- pastCustomers %>%
filter(Store_type=='Control') %>%
mutate(nCustomers = nCustomers * (1+stdDev*2),
Store_type = 'Control 95th % confidence interval')
#### Control store 5th percentile
pastCustomers_Controls5 <- pastCustomers %>%
filter(Store_type=='Control') %>%
mutate(nCustomers = nCustomers * (1-stdDev*2),
Store_type = 'Control 5th % confidence interval')
#### Combine the tables pastSales, pastSales_Controls95, pastSales_Controls5
trialAssessment <- rbind(pastCustomers, pastCustomers_Controls95, pastCustomers_Controls5)
#### Plotting these in one nice graph
pp6<-ggplot(trialAssessment, aes(TransactionMonth, nCustomers, color = Store_type)) +
geom_rect(data = trialAssessment %>% filter(YEARMONTH<201905 & YEARMONTH>201901),
aes(xmin=min(TransactionMonth), xmax=max(TransactionMonth),
ymin=0, ymax=Inf, color=NULL), show.legend = FALSE) +
geom_line() +
labs(x='Month of operation', y='Number of customers',
title = 'Total customers by month - Trial 88 Control 237')
pp6
# Define multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library('ggforce') # visualisation
library('ggridges') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# layout <- matrix(c(1,2,3,4,5,6),3,2,byrow=TRUE)
#
# multiplot(p1, p2, p3, p4, p5, p6, layout=layout)
layout <- matrix(c(1,2,3,4,5,6),3,2,byrow=TRUE)
multiplot(pp1, pp2, pp3, pp4, pp5, pp6, layout=layout)
#### As our null hypothesis is that the trial period is the same as the pre-trial period, let's take the standard deviation based on the scaled percentage difference in the pre-trial period
stdDev <- sd(percentageDiff[YEARMONTH < 201902 , percentageDiff])
degreesOfFreedom <- 7
# percentageDiff[, tValue:= (percentageDiff-0)/stdDev
#                ][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100,
#                                                      YEARMONTH %% 100, 1,
#                                                      sep='-'), format = '%Y-%m-%d')
#                  ][, .(TransactionMonth,
#                        percentile_95th = qt(p=0.025, degreesOfFreedom, lower.tail = F),
#                        tValue)]
#### Trial and control store number of customers
pastCustomers <- measureOverTimeCusts[, Store_type:= ifelse(STORE_NBR==control_store, 'Control',
ifelse(STORE_NBR==trial_store, 'Trial',
'Other stores'))
][, nCusts := mean(nCustomers),
by = c("YEARMONTH", "Store_type")
][, TransactionMonth := as.Date(paste(YEARMONTH %/%100,
YEARMONTH %% 100, 1,
sep='-'),
format = '%Y-%m-%d')
][Store_type %in% c("Trial", "Control"), ]
#### Control store 95th percentile
pastCustomers_Controls95 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 + stdDev * 2)
][, Store_type := "Control 95th % confidence interval"]
#### Control store 5th percentile
pastCustomers_Controls5 <- pastCustomers[Store_type == "Control",
][, nCusts := nCusts * (1 - stdDev * 2)
][, Store_type := "Control 5th % confidence interval"]
trialAssessment <- rbind(pastCustomers,
pastCustomers_Controls95,
pastCustomers_Controls5)
#### Over to you! Plot everything into one nice graph.
#### Hint: geom_rect creates a rectangle in the plot. Use this to highlight the trial period in our graph.
pp2 <- ggplot(trialAssessment, aes(TransactionMonth, nCusts, color=Store_type)) +
geom_rect(data = trialAssessment[YEARMONTH<201905&YEARMONTH>201901,],
aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth),
ymin = 0, ymax = Inf, color = NULL), show.legend = FALSE) +
geom_line() +
labs(x = 'Month of operation', y = 'Total customer',
title = 'Total customer by months - Trial 77 vs Control 233')
pp2
